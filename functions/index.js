/// functions/index.js
/// 
/// PROP√ìSITO:
/// Sistema backend completo de Firebase Cloud Functions para el Club de Golf Papudo.
/// Maneja la funcionalidad cr√≠tica del sistema de reservas multi-deporte incluyendo:
/// - Sincronizaci√≥n autom√°tica diaria de 502+ usuarios desde Google Sheets
/// - Sistema de emails autom√°ticos para confirmaci√≥n y cancelaci√≥n de reservas
/// - API RESTful para integraci√≥n con aplicaci√≥n Flutter Web/PWA
/// - Gesti√≥n completa del ciclo de vida de reservas de p√°del
/// - Arquitectura h√≠brida para integraci√≥n con sistema GAS existente (Golf/Tenis)
/// 
/// VERSI√ìN: v2.1.0 - Julio 2025
/// ESTADO: ‚úÖ PRODUCCI√ìN - Sistema 100% operativo
/// STACK: Node.js 20 + Firebase Functions Gen2 + Firestore + Google Sheets API
/// 
/// FUNCIONES PRINCIPALES:
/// 1. dailyUserSync: Sincronizaci√≥n autom√°tica de usuarios (6:00 AM diario)
/// 2. sendBookingEmailHTTP: Emails de confirmaci√≥n de reservas
/// 3. cancelBooking: Sistema de cancelaci√≥n individual con notificaciones
/// 4. getUsers: API para obtener usuarios desde Flutter
/// 5. verifyGoogleSheetsAPI: Diagn√≥stico y validaci√≥n de conectividad
/// 
/// CONFIGURACI√ìN CR√çTICA:
/// - Memoria: 1GB por funci√≥n para manejar 502+ usuarios
/// - Timeout: 9 minutos m√°ximo para sincronizaci√≥n completa
/// - Timezone: America/Santiago para horarios locales Chile
/// - Region: us-central1 para Firebase Functions
/// - Auth: Service Account integrado para Google Sheets API

// ============================================================================
// DEPENDENCIAS Y CONFIGURACI√ìN INICIAL
// ============================================================================

const {onDocumentCreated} = require("firebase-functions/v2/firestore");
const nodemailer = require('nodemailer');
const {onRequest} = require("firebase-functions/v2/https");
const {onSchedule} = require("firebase-functions/v2/scheduler");
const {setGlobalOptions} = require("firebase-functions/v2");
const admin = require('firebase-admin');
const { GoogleSpreadsheet } = require('google-spreadsheet');

// Inicializar Firebase Admin SDK
admin.initializeApp();

// Configuraci√≥n global para todas las functions
setGlobalOptions({
  maxInstances: 10,
  region: 'us-central1'
});

// ============================================================================
// CONFIGURACI√ìN DE EMAIL TRANSPORTER
// ============================================================================

/// Configuraci√≥n de Gmail con App Password para m√°xima compatibilidad
/// 
/// Utiliza nodemailer con autenticaci√≥n directa via App Password de Google.
/// Esta configuraci√≥n es m√°s estable que OAuth2 para automatizaci√≥n de emails.
/// 
/// CARACTER√çSTICAS:
/// - Service: Gmail (m√°xima deliverability)
/// - Auth: App Password (sin expiraci√≥n)
/// - TLS: Configurado para compatibilidad universal
/// - Timeout: Optimizado para emails con attachments
/// 
/// @return {Object} Transporter configurado para env√≠o de emails
const createTransporter = () => {
  const gmailPassword = 'yyll uhje izsv mbwc'; // App Password dedicado
  
  console.log('üìß Configurando Gmail transporter...');
  
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: 'paddlepapudo@gmail.com',
      pass: gmailPassword
    },
    tls: {
      rejectUnauthorized: false
    }
  });
};

// ============================================================================
// FUNCI√ìN PRINCIPAL: SINCRONIZACI√ìN AUTOM√ÅTICA DE USUARIOS
// ============================================================================

/// **FUNCI√ìN CR√çTICA** - Sincronizaci√≥n autom√°tica diaria de usuarios
/// 
/// Ejecuta sincronizaci√≥n completa entre Google Sheets (planilla maestro del club)
/// y Firestore (base de datos de la aplicaci√≥n). Procesa 502+ usuarios con
/// estructura de datos optimizada y logging completo para monitoreo.
/// 
/// PROGRAMACI√ìN:
/// - Horario: 6:00 AM Chile (America/Santiago timezone)
/// - Frecuencia: Diaria autom√°tica
/// - Duraci√≥n: 2-3 minutos promedio
/// - Memoria: 1GB para manejar volumen completo
/// - Timeout: 9 minutos m√°ximo permitido
/// 
/// PROCESO DE SINCRONIZACI√ìN:
/// 1. Conexi√≥n autenticada a Google Sheets via Service Account
/// 2. Carga completa de hoja "Maestro" (502+ filas)
/// 3. Procesamiento individual con validaciones de email
/// 4. Formateo de nombres seg√∫n est√°ndar del club
/// 5. Operaci√≥n .set() para reemplazo completo de datos
/// 6. Logging de estad√≠sticas detalladas
/// 7. Timestamp de √∫ltima sincronizaci√≥n en collection system
/// 
/// ESTRUCTURA DE DATOS SINCRONIZADA (10 campos por usuario):
/// - email: Clave primaria √∫nica
/// - name: Nombre formateado para UI (ej: "FELIPE GARCIA B")
/// - phone: Tel√©fono para sistema de emails
/// - givenNames: Nombres de pila completos
/// - lastName: Apellido paterno
/// - motherLastName: Apellido materno
/// - idDocument: RUT/Pasaporte para identificaci√≥n
/// - birthDate: Fecha de nacimiento
/// - relation: Tipo de membres√≠a (SOCIO TITULAR, HIJO, etc.)
/// - Campos sistema: isActive, lastSyncFromSheets, source
/// 
/// GOOGLE SHEETS ESTRUCTURA (headers en espa√±ol):
/// - EMAIL, NOMBRE(S), APELLIDO_PATERNO, APELLIDO_MATERNO
/// - RUT/PASAPORTE, FECHA_NACIMIENTO, RELACION, CELULAR
/// 
/// ESTAD√çSTICAS GENERADAS:
/// - processed: Total de filas procesadas
/// - created: Usuarios nuevos agregados
/// - updated: Usuarios existentes actualizados  
/// - filtered: Filas omitidas (emails inv√°lidos)
/// - errors: Errores encontrados durante proceso
/// - executionTime: Duraci√≥n total en milisegundos
/// 
/// @param {Object} context - Firebase Functions context
/// @throws No propaga errores, logs en Firestore para debugging
/// @logs Estad√≠sticas completas en Firebase Functions logs
exports.dailyUserSync = onSchedule({
  schedule: "0 6 * * *", // 6:00 AM Chile diario
  timeZone: "America/Santiago",
  memory: "1GiB",
  timeoutSeconds: 540, // 9 minutos m√°ximo
}, async (context) => {
  try {
    console.log('üîÑ === SINCRONIZACI√ìN AUTOM√ÅTICA DIARIA INICIADA ===');
    console.log('‚è∞ Timestamp:', new Date().toISOString());
    console.log('üåç Timezone: America/Santiago');
    
    const startTime = Date.now();
    
    // Configuraci√≥n de Google Sheets
    const SHEET_ID = '1A-8RvvgkHXUP-985So8CBJvDAj50w58EFML1CJEq2c4';
    const SHEET_NAME = 'Maestro';
    
    // Credenciales Service Account para Google Sheets API
    const serviceAccountEmail = "sheets-api-service@cgpreservas.iam.gserviceaccount.com";
    const privateKey = `-----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDjOl2rzfM4gPIT
    LgW34/wl1TY/elF6ic6JP53hxHWJZeyjd3q5eFl9fWvdDaujo641ymq0LDeW7rFS
    QnDhM+EmEmQEz/r6YFmzRhzneIZXSJDjGdSPdV3LkIuhn6Fz/2eiL+k9qMAx5Tea
    fPlLikd4UHhw4yEMpnmkt/MBxxW77taoCTTR/Es6e+j0/qpMmdY/G/E0jgjIITwR
    TIRgzyPgGmax+JZleXqQXZYDPlThozXqMZiVr6+4OPkZod2EUwCki+L2vdh+0KqW
    xZejkjZ8Yc89YWzAr2QXGh2V2wy8h4DLk+z7hBw0hhmc6qpfRPw8I51S553E8Q1V
    3K0EKQc7AgMBAAECggEAFhLg76QxqP8JxSg24P7SS2CThQYebS9+82FNNpXtrxvK
    KbUdJHBXDTRGarJ9xodLkKkpxXf4LH7ilfGjYpU2HYsy0S7dHD6I6Dv66deRAWCo
    xo8HUapeorxXfCt0NT8N87kAyP8gMJiqVqUmWJrFx5/Vm23NE5wGfCRshHMxHtDt
    f0CNZwXvgRQdIGgIBGk9sVspSWKWLqSjCK+aknaBlOieNq3VwhdytBYdr0HukLl2
    kV4FGGtOu2QbLTEfI1gZk1L48wOrSquHPt++OnOGe7AHCgykoj4IIvt9UMi+yp9q
    v+2nsBr8P5ZR0PS8oLIXn6JQwjUD7sDc/JTI2TeA9QKBgQD6tV5P4R75he3wxjxX
    5muean28Y6VwkJzvh3rd3ABj/8NC8AV7N0/Gf1j9f3EkK+Gf29cGbn6CkR9YyXya
    kDu8ZbNZHyXyI3V+bOnnQC+71D11TcKKdoLtYN2oicxMEHPxw9kXSG+XoOc4DCX0
    bpiVYEHq5VYesrzeHcJmNb0VhwKBgQDoBiCf1gz3rGg+aNEP5LFChcqNf5aFtfdG
    ElP2VXoLWtVlSeteQR0lVoduBHhp4gwBBdNdW/O/sRvlOMqYAADz9+R9dTay5NfO
    61n3RX+Dg8BHRnfKwEkJwtEkwYFE3pKHRppMwJV6j7KHHv2gEX8Xg7j8+jGHSIlS
    Cy038tFtrQKBgBuW0eYgc/QplOGmLwXNSZKJTYTpwk782whQ9GhtyW03vBklqLTC
    hXjmkrhyydSdL5sT6jm+9xUPO0/d/GRV8vzshCwOjXJ0DH35JlRYb+hPluPNxtbN
    6+KLglkFsQG93cSBNOanBgC9qDQ2wgaAFTJ7AUYELtH6AWbAB6CP0VsJAoGACbqY
    C5uyF4CHLna+rWftdtidUamT6i9jGvERzDZxU6CPahvbXqxkSHiEXTyav/XWgwR3
    hGaipdsLTGVBOXZmk9RFJG2RyZaG5gpAT3n+iskves2doEbHyTz+AAiNHxImGr3/
    IlDA886qsbe+8sNJDPdc/l6PTRjhiSsmzj3EQlECgYEA5cN5s0gG1lMi3g6BYgJI
    ygMUk3gc51IdnybXyunvNOMwBSf82fQE3OVLuQBDXISOkQUHBnjnrQYt5Vf1JZGU
    15SNAe15MPdYJujryWGEqw3Q6qHc1XGJJAfxMMz8YbO06czV6TZK9GOdREzWnvnM
    XZTXYEu54CkpfjQSs3dMAgY=
    -----END PRIVATE KEY-----`;
    
    if (!serviceAccountEmail || !privateKey) {
      throw new Error('Credenciales de Google Sheets no configuradas');
    }
    
    // Conectar a Google Sheets
    const doc = new GoogleSpreadsheet(SHEET_ID);
    await doc.useServiceAccountAuth({
      client_email: serviceAccountEmail,
      private_key: privateKey.replace(/\n    /g, '\n'),
    });
    
    await doc.loadInfo();
    console.log('üìä Documento Google Sheets cargado:', doc.title);
    
    const sheet = doc.sheetsByTitle[SHEET_NAME];
    if (!sheet) {
      throw new Error(`Hoja '${SHEET_NAME}' no encontrada`);
    }
    
    // Leer todas las filas de la planilla
    const rows = await sheet.getRows();
    console.log(`üìä Filas encontradas en Sheets: ${rows.length}`);
    console.log(`üîÑ Procesando TODOS los ${rows.length} usuarios...`);
    
    const db = admin.firestore();
    const usersRef = db.collection('users');
    
    // Estad√≠sticas de proceso
    const stats = {
      processed: 0,
      created: 0,
      updated: 0,
      errors: 0,
      filtered: 0
    };
    
    // Procesar cada usuario individualmente
    for (const row of rows) {
      try {
        stats.processed++;
        
        // Extraer datos de la fila usando headers en espa√±ol
        const email = (row.EMAIL || '').trim().toLowerCase();
        const nombres = (row['NOMBRE(S)'] || '').trim();
        const apellidoPaterno = (row.APELLIDO_PATERNO || '').trim();
        const apellidoMaterno = (row.APELLIDO_MATERNO || '').trim();
        const rutPasaporte = (row['RUT/PASAPORTE'] || '').trim();
        const fechaNacimiento = (row['FECHA_NACIMIENTO'] || '').trim();
        const relacion = (row.RELACION || '').trim();
        const celular = (row.CELULAR || '').trim();
        
        // Validar email v√°lido
        if (!email || !email.includes('@')) {
          stats.filtered++;
          continue;
        }
        
        // Formatear nombre seg√∫n est√°ndar del club
        const formattedName = formatUserName(nombres, apellidoPaterno, apellidoMaterno);
        
        // Estructura de datos optimizada (10 campos)
        const userData = {
          // Campos principales para UI Flutter
          email: email,
          name: formattedName,
          phone: celular,
          
          // Campos detallados nomenclatura est√°ndar
          givenNames: nombres,
          lastName: apellidoPaterno,
          motherLastName: apellidoMaterno,
          idDocument: rutPasaporte,
          birthDate: fechaNacimiento,
          relation: relacion,
          
          // Campos sistema
          isActive: true,
          lastSyncFromSheets: admin.firestore.FieldValue.serverTimestamp(),
          source: 'google_sheets_auto'
        };
        
        // Verificar si usuario existe
        const userDoc = await usersRef.doc(email).get();
        
        // Usar .set() para reemplazo completo (evita campos duplicados)
        await usersRef.doc(email).set({
          ...userData,
          createdAt: userDoc.exists ? userDoc.data().createdAt : admin.firestore.FieldValue.serverTimestamp()
        });
        
        if (userDoc.exists) {
          stats.updated++;
        } else {
          stats.created++;
        }
        
      } catch (error) {
        stats.errors++;
        console.error(`‚ùå Error procesando usuario:`, error.message);
      }
    }
    
    // Guardar estad√≠sticas en Firestore para monitoreo
    await db.collection('system').doc('sync_status').set({
      lastAutoSync: new Date(),
      autoSyncStats: stats,
      source: 'scheduled_sync',
      sheetId: SHEET_ID,
      executionTime: Date.now() - startTime
    }, { merge: true });
    
    // Logging de resumen completo
    const executionTime = Date.now() - startTime;
    
    console.log('üéâ === SINCRONIZACI√ìN AUTOM√ÅTICA COMPLETADA ===');
    console.log(`‚è±Ô∏è  Tiempo de ejecuci√≥n: ${executionTime}ms`);
    console.log(`üìã Procesados: ${stats.processed}`);
    console.log(`‚úÖ Creados: ${stats.created}`);
    console.log(`üîÑ Actualizados: ${stats.updated}`);
    console.log(`‚ö†Ô∏è  Filtrados: ${stats.filtered}`);
    console.log(`‚ùå Errores: ${stats.errors}`);
    console.log(`üéØ √âxito: ${((stats.created + stats.updated) / stats.processed * 100).toFixed(1)}%`);
    console.log('‚úÖ Sincronizaci√≥n programada completada exitosamente');
    
  } catch (error) {
    console.error('‚ùå ERROR CR√çTICO en sincronizaci√≥n programada:', error);
    
    // Guardar error en Firestore para debugging
    try {
      await admin.firestore().collection('system').doc('sync_errors').set({
        timestamp: new Date(),
        error: error.message,
        stack: error.stack,
        source: 'scheduled_sync'
      }, { merge: true });
    } catch (e) {
      console.error('‚ùå Error guardando log de error:', e);
    }
    
    throw error; // Re-lanzar para que Firebase Functions registre el error
  }
});

// ============================================================================
// SISTEMA DE EMAILS AUTOM√ÅTICOS
// ============================================================================

/// **FUNCI√ìN CR√çTICA** - Env√≠o de emails de confirmaci√≥n de reservas
/// 
/// Procesa solicitudes de env√≠o de emails desde la aplicaci√≥n Flutter y env√≠a
/// confirmaciones autom√°ticas a todos los jugadores de una reserva. Maneja
/// hasta 4 jugadores por reserva con templates HTML profesionales.
/// 
/// CARACTER√çSTICAS:
/// - CORS configurado para dominios autorizados del club
/// - Templates HTML responsive para todos los clientes de email
/// - Gesti√≥n de usuarios VISITA con validaciones especiales
/// - Links de cancelaci√≥n individual para cada jugador
/// - Header corporativo Club de Golf Papudo
/// - Compatibilidad universal: Gmail, Outlook, Apple Mail, Thunderbird
/// 
/// PROCESO DE ENV√çO:
/// 1. Validaci√≥n de datos de reserva recibidos
/// 2. Normalizaci√≥n de estructura (compatibilidad con versiones anteriores)
/// 3. Configuraci√≥n de transporter Gmail
/// 4. Generaci√≥n de template HTML personalizado por jugador
/// 5. Env√≠o secuencial con manejo de errores individual
/// 6. Logging detallado de resultados por email
/// 7. Respuesta con estad√≠sticas completas
/// 
/// ESTRUCTURA DE DATOS ESPERADA:
/// ```json
/// {
///   "booking": {
///     "date": "2025-07-24",
///     "time": "19:30",
///     "courtId": "court_1",
///     "players": [
///       {"name": "FELIPE GARCIA B", "email": "felipe@garciab.cl"},
///       {"name": "ANA BELMAR P", "email": "ana@buzeta.cl"},
///       {"name": "PADEL1 VISITA", "email": null},
///       {"name": "PADEL2 VISITA", "email": null}
///     ]
///   }
/// }
/// ```
/// 
/// EMAILS GENERADOS:
/// - Subject: "Reserva de P√°del Confirmada - [fecha]"
/// - Template: HTML responsive con branding corporativo
/// - Contenido: Detalles completos de reserva + lista de jugadores
/// - Bot√≥n: Cancelaci√≥n individual por jugador
/// - Footer: Informaci√≥n de contacto completa del club
/// 
/// GESTI√ìN DE USUARIOS VISITA:
/// - Detecta autom√°ticamente jugadores "VISITA" por nombre
/// - Muestra mensaje especial al organizador sobre pagos
/// - Omite env√≠o de email a usuarios sin email v√°lido
/// - Logs espec√≠ficos para usuarios VISITA
/// 
/// @param {Object} req - Request con datos de reserva
/// @param {Object} res - Response con resultados de env√≠o
/// @returns {Object} Estad√≠sticas de emails enviados/fallidos
/// @logs Proceso completo de cada email individual
exports.sendBookingEmailHTTP = onRequest({
  region: 'us-central1',
  cors: {
    origin: [
      "http://localhost:3000",
      "http://localhost:5000", 
      "https://cgpreservas.web.app",
      "https://cgpreservas.firebaseapp.com",
      "https://paddlepapudo.github.io"
    ],
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization", "Accept"],
    credentials: true
  }
}, async (req, res) => {
  console.log('üìß === ENVIANDO EMAILS DE CONFIRMACI√ìN ===');
  console.log('üìß Body:', JSON.stringify(req.body, null, 2));
  
  try {
    const bookingData = req.body;
    // üÜï EXTRAER par√°metros de admin
    const { isAdminAction = false, adminActionType = null } = req.body;
    const requestType = req.body.type;
    console.log(`üìß Admin Action: ${isAdminAction}, Type: ${adminActionType}`);
    console.log(`üìß Request type: ${requestType}`);

    const booking = bookingData.booking || bookingData;
    
    console.log(`üìß Admin Action: ${isAdminAction}, Type: ${adminActionType}`);

    // üÜï AGREGAR ESTAS L√çNEAS DE DEBUG
    console.log('üìß booking structure:', JSON.stringify(booking, null, 2));
    console.log('üìß bookingData keys:', Object.keys(bookingData));

    // Normalizar datos para compatibilidad con versiones anteriores
    const normalizedBooking = {
      date: booking.date,
      time: booking.time || booking.timeSlot,
      courtId: booking.courtId || booking.courtNumber,
      players: booking.players || []
    };
    
    console.log(`üìß Procesando reserva: ${normalizedBooking.courtId} ${normalizedBooking.date} ${normalizedBooking.time}`);
    console.log(`üìß Jugadores: ${normalizedBooking.players.length}`);
    
    if (!normalizedBooking.players || normalizedBooking.players.length === 0) {
      throw new Error('No hay jugadores en la reserva');
    }
    
    // Configurar Gmail transporter
    const transporter = createTransporter();
    
    // Detectar si hay usuarios VISITA
    const isVisitorBooking = normalizedBooking.players.some(player => {
      const playerName = typeof player === 'string' ? player : (player.name || '');
      return playerName.toUpperCase().includes('VISITA');
    });
    
    // Enviar emails a cada jugador
    const emailResults = [];
    
    for (let i = 0; i < normalizedBooking.players.length; i++) {
      const player = normalizedBooking.players[i];
      const playerName = typeof player === 'string' ? player : (player.name || 'Jugador');
      const playerEmail = typeof player === 'string' ? null : player.email;
      
      if (!playerEmail) {
        console.log(`‚è≠Ô∏è Saltando ${playerName} - no tiene email`);
        continue;
      }
      
      console.log(`üìß Enviando email ${i + 1}/${normalizedBooking.players.length} a: ${playerName} (${playerEmail})`);
      
      try {
        // Es organizador si es el primer jugador con email v√°lido
        const isOrganizer = emailResults.length === 0;
        const showVisitorMessage = isOrganizer && isVisitorBooking;
        
      // let emailHtml;
      // const requestType = req.body.type; // Nuevo par√°metro del EmailService

      // if (isAdminAction) {
      //   // L√≥gica anterior (mantener como backup)
      //   if (adminActionType === 'ADDED') {
      //     emailHtml = generatePlayerAddedByAdminEmailTemplate(normalizedBooking, 'Administrador', showVisitorMessage, playerEmail);
      //   } else if (adminActionType === 'REMOVED') {
      //     emailHtml = generatePlayerRemovedByAdminEmailTemplate(normalizedBooking, 'Administrador', showVisitorMessage, playerEmail);
      //   } else {
      //     console.log(`‚ùå adminActionType inv√°lido: ${adminActionType}`);
      //     continue;
      //   }
      // } else if (requestType === 'player_added') {
      //   // Nueva l√≥gica usando el par√°metro 'type' del EmailService
      //   emailHtml = generatePlayerAddedByAdminEmailTemplate(normalizedBooking, 'Administrador', showVisitorMessage, playerEmail);
      // } else if (requestType === 'player_removed') {
      //   // Nueva l√≥gica usando el par√°metro 'type' del EmailService  
      //   emailHtml = generatePlayerRemovedByAdminEmailTemplate(normalizedBooking, 'Administrador', showVisitorMessage, playerEmail);
      // } else {
      //   // L√≥gica normal existente
      //   emailHtml = generateBookingEmailHtml(normalizedBooking, playerName, showVisitorMessage, playerEmail);
      // }
      let emailHtml;
      const requestType = req.body.type;

      if (requestType === 'player_added') {
        emailHtml = generateBookingEmailHtml(normalizedBooking, playerName, showVisitorMessage, playerEmail)
          .replace('Reserva de Golf Confirmada', 'Agregado a Reserva de Golf')
          .replace('Reserva de Tenis Confirmada', 'Agregado a Reserva de Tenis')
          .replace('Reserva de P√°del Confirmada', 'Agregado a Reserva de P√°del')
          .replace('Tu reserva de golf ha sido confirmada exitosamente', 'Has sido agregado a una reserva de golf')
          .replace('Tu reserva de tenis ha sido confirmada exitosamente', 'Has sido agregado a una reserva de tenis')
          .replace('Tu reserva de p√°del ha sido confirmada exitosamente', 'Has sido agregado a una reserva de p√°del');
      } else if (requestType === 'player_removed') {
        emailHtml = generateBookingEmailHtml(normalizedBooking, playerName, showVisitorMessage, playerEmail)
          .replace(/Reserva de Golf Confirmada/g, 'Removido de Reserva de Golf')
          .replace(/Reserva de Tenis Confirmada/g, 'Removido de Reserva de Tenis')
          .replace(/Reserva de P√°del Confirmada/g, 'Removido de Reserva de P√°del')
          .replace(/Confirmada/g, 'Modificada')
          .replace('Tu reserva de golf ha sido confirmada exitosamente', 'Has sido removido de la reserva de golf')
          .replace('Te esperamos', 'Si tienes dudas, contacta al club');
      } else {
        emailHtml = generateBookingEmailHtml(normalizedBooking, playerName, showVisitorMessage, playerEmail);
      }

      const sport = getSportFromCourtId(normalizedBooking.courtId);
      const sportName = sport === 'TENIS' ? 'Tenis' : sport === 'GOLF' ? 'Golf' : 'P√°del';

      let emailSubject;
      if (requestType === 'player_added') {
        emailSubject = `Agregado a Reserva de ${sportName} - ${formatDate(normalizedBooking.date)}`;
      } else if (requestType === 'player_removed') {
        emailSubject = `Removido de Reserva de ${sportName} - ${formatDate(normalizedBooking.date)}`;
      } else {
        emailSubject = `Reserva de ${sportName} Confirmada - ${formatDate(normalizedBooking.date)}`;
      }
        
      const mailOptions = {
        from: { /* ... */ },
        to: playerEmail,
        subject: emailSubject,
        html: emailHtml
      };
        
        await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Email enviado exitosamente a: ${playerName} (${playerEmail})`);
        emailResults.push({ success: true, player: playerName, email: playerEmail });
        
      } catch (emailError) {
        console.error(`‚ùå Error enviando email a ${playerName}:`, emailError);
        emailResults.push({ success: false, player: playerName, email: playerEmail, error: emailError.message });
      }
    }
    
    const successCount = emailResults.filter(r => r.success).length;
    const failCount = emailResults.filter(r => !r.success).length;
    
    console.log('üìß === RESUMEN EMAILS ===');
    console.log(`‚úÖ Exitosos: ${successCount}/${emailResults.length}`);
    console.log(`‚ùå Fallidos: ${failCount}/${emailResults.length}`);
    
    res.status(200).json({
      success: true,
      message: `${successCount} emails enviados exitosamente`,
      results: emailResults,
      successCount: successCount,
      failCount: failCount
    });
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
    res.status(500).json({
      success: false,
      message: error.message,
      error: error.toString()
    });
  }
});

// ============================================================================
// SISTEMA DE CANCELACI√ìN DE RESERVAS
// ============================================================================

/// **FUNCI√ìN CR√çTICA** - Cancelaci√≥n individual de jugadores con notificaciones
/// 
/// Maneja cancelaciones individuales de jugadores desde links de email.
/// Actualiza la reserva en Firestore y notifica autom√°ticamente a los
/// jugadores restantes. Soporta tanto requests GET (desde emails) como
/// POST (desde aplicaci√≥n).
/// 
/// CARACTER√çSTICAS:
/// - Cancelaci√≥n individual por jugador (no elimina toda la reserva)
/// - B√∫squeda inteligente por ID de reserva o campos individuales
/// - Notificaciones autom√°ticas a jugadores restantes
/// - Template HTML de confirmaci√≥n para GET requests
/// - Actualizaci√≥n de estado de reserva (complete/incomplete)
/// - Logging detallado de todo el proceso
/// 
/// PROCESO DE CANCELACI√ìN:
/// 1. Decodificaci√≥n de par√°metros (ID reserva + email jugador)
/// 2. B√∫squeda de reserva en Firestore por ID o campos alternativos
/// 3. Identificaci√≥n y remoci√≥n del jugador que cancela
/// 4. Env√≠o de notificaciones a jugadores restantes
/// 5. Actualizaci√≥n de reserva con nueva lista de jugadores
/// 6. Respuesta con confirmaci√≥n (HTML para GET, JSON para POST)
/// 
/// PAR√ÅMETROS ESPERADOS:
/// - id: ID de reserva (formato: court1-2025-07-24-1930)
/// - email: Email del jugador que cancela (URL encoded)
/// 
/// BUSQUEDA DE RESERVA:
/// 1. B√∫squeda directa por campo 'id' en Firestore
/// 2. Si falla, decodifica ID y busca por campos individuales:
///    - courtNumber: extra√≠do de ID
///    - date: extra√≠do de ID  
///    - timeSlot: extra√≠do de ID
/// 
/// NOTIFICACIONES AUTOM√ÅTICAS:
/// - Template HTML espec√≠fico para cancelaciones
/// - Informaci√≥n del jugador que cancel√≥
/// - Lista actualizada de jugadores restantes
/// - Datos completos de la reserva
/// - Informaci√≥n de contacto del jugador que cancel√≥
/// 
/// RESPUESTAS:
/// - GET: P√°gina HTML de confirmaci√≥n con estilo corporativo
/// - POST: JSON con status de cancelaci√≥n
/// - Error: P√°gina/JSON con informaci√≥n del problema
/// 
/// @param {Object} req - Request con par√°metros de cancelaci√≥n
/// @param {Object} res - Response con confirmaci√≥n
/// @returns {HTML|JSON} Confirmaci√≥n seg√∫n tipo de request
/// @logs Proceso completo de cancelaci√≥n y notificaciones
exports.cancelBooking = onRequest({
  cors: true,
}, async (req, res) => {
  if (req.method === "OPTIONS") {
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type');
    return res.status(204).send('');
  }

  try {
    console.log('üóëÔ∏è === CANCELACI√ìN DE RESERVA ===');
    console.log('üóëÔ∏è Method:', req.method);
    console.log('üóëÔ∏è Query:', req.query);

    const bookingId = req.query.id || req.body.bookingId;
    const playerEmail = req.query.email || req.body.playerEmail;
    
    if (!bookingId) {
      return res.status(400).json({
        success: false,
        error: 'ID de reserva requerido'
      });
    }

    if (!playerEmail) {
      return res.status(400).json({
        success: false,
        error: 'Email del jugador requerido'
      });
    }

    console.log(`üóëÔ∏è Cancelando jugador ${decodeURIComponent(playerEmail)} de reserva: ${bookingId}`);

    const db = admin.firestore();
    const bookingsRef = db.collection('bookings');
    
    // Variables para almacenar datos de la reserva
    let bookingData = null;
    let originalPlayers = [];
    let docRef = null;

    // Buscar la reserva por ID generado
    console.log(`üîç Buscando por ID: ${bookingId}`);
    const snapshot = await bookingsRef.where('id', '==', bookingId).get();
    
    if (snapshot.empty) {
      // B√∫squeda alternativa por campos individuales
      const idParts = bookingId.split('-');
      console.log(`üîç ID parts:`, idParts);
      
      if (idParts.length >= 5) {
        // ID formato: court1-2025-06-05-1200 ‚Üí court_1, 2025-06-05, 12:00
        const courtId = idParts[0];
        const date = `${idParts[1]}-${idParts[2]}-${idParts[3]}`;
        const timeRaw = idParts[4];
        const timeSlot = `${timeRaw.substring(0,2)}:${timeRaw.substring(2,4)}`;
        
        console.log(`üîç Buscando por: court=${courtId}, date=${date}, time=${timeSlot}`);
        
        const alternativeSnapshot = await bookingsRef
          .where('courtId', '==', courtId)
          .where('date', '==', date)
          .where('timeSlot', '==', timeSlot)
          .get();
          
        if (!alternativeSnapshot.empty) {
          const doc = alternativeSnapshot.docs[0];
          bookingData = doc.data();
          originalPlayers = [...(bookingData.players || [])];
          docRef = doc.ref;
          console.log('‚úÖ Reserva encontrada por b√∫squeda alternativa');
        }
      }
    } else {
      // Reserva encontrada por ID directo
      const doc = snapshot.docs[0];
      bookingData = doc.data();
      originalPlayers = [...(bookingData.players || [])];
      docRef = doc.ref;
      console.log('‚úÖ Reserva encontrada por ID directo');
    }

    // Procesar cancelaci√≥n si encontramos la reserva
    if (bookingData && docRef) {
      console.log('üë• Jugadores originales:', originalPlayers.map(p => p.email));
      
      // Filtrar el jugador que cancela
      const decodedPlayerEmail = decodeURIComponent(playerEmail);
      const updatedPlayers = originalPlayers.filter(player => 
        player.email !== decodedPlayerEmail
      );
      
      console.log('üë• Jugadores despu√©s de cancelaci√≥n:', updatedPlayers.map(p => p.email));
      
      // Identificar jugador que cancela para notificaciones
      const cancelingPlayer = originalPlayers.find(player => 
        player.email === decodedPlayerEmail
      );
      const cancelingPlayerName = cancelingPlayer ? 
        (cancelingPlayer.name || cancelingPlayer.displayName || 'Un compa√±ero') : 
        'Un compa√±ero';
      
      console.log(`üë§ Jugador que cancela: ${cancelingPlayerName} (${decodedPlayerEmail})`);

      if (updatedPlayers.length === 0) {
        // Si no quedan jugadores, eliminar toda la reserva
        console.log('üóëÔ∏è No quedan jugadores, eliminando reserva completa...');
        await docRef.delete();
        console.log('‚úÖ Reserva eliminada completamente');
      } else {
        // Enviar notificaciones antes de actualizar
        console.log('üìß === ENVIANDO NOTIFICACIONES DE CANCELACI√ìN ===');
        
        try {
          const reservationInfo = {
            date: bookingData.date,
            timeSlot: bookingData.timeSlot,
            courtId: bookingData.courtId,
            originalPlayers: originalPlayers,
            remainingPlayers: updatedPlayers,
            cancelingPlayerName: cancelingPlayerName,
            cancelingPlayerEmail: decodedPlayerEmail
          };

          // Enviar notificaciones a jugadores restantes
          const notificationPromises = updatedPlayers.map(player => 
            sendCancellationNotification(player, reservationInfo)
          );

          const notificationResults = await Promise.allSettled(notificationPromises);
          
          let successCount = 0;
          let failureCount = 0;
          
          notificationResults.forEach((result, index) => {
            if (result.status === 'fulfilled') {
              successCount++;
              console.log(`‚úÖ Notificaci√≥n enviada a: ${updatedPlayers[index].email}`);
            } else {
              failureCount++;
              console.log(`‚ùå Error notificando a ${updatedPlayers[index].email}:`, result.reason);
            }
          });
          
          console.log(`üìß Notificaciones: ${successCount} exitosas, ${failureCount} fallos`);
          
        } catch (notificationError) {
          console.error('‚ùå Error en notificaciones:', notificationError);
        }

        // Actualizar reserva con jugadores restantes
        console.log('üîÑ Actualizando reserva con jugadores restantes...');
        const newStatus = updatedPlayers.length === 4 ? 'complete' : 'incomplete';

        await docRef.update({
          players: updatedPlayers,
          status: newStatus,
          lastModified: new Date()
        });
        console.log(`‚úÖ Jugador removido. Quedan ${updatedPlayers.length} jugadores`);
      }
    }

    // Respuesta seg√∫n tipo de request
    if (req.method === 'GET') {
      // P√°gina HTML de confirmaci√≥n para clicks desde email
      const html = generateCancellationConfirmationHtml(bookingId, playerEmail);
      res.set('Content-Type', 'text/html');
      return res.status(200).send(html);
    }

    // Respuesta JSON para requests POST
    return res.status(200).json({
      success: true,
      message: 'Reserva cancelada exitosamente',
      bookingId: bookingId
    });

  } catch (error) {
    console.error('‚ùå Error cancelando:', error);
    
    if (req.method === 'GET') {
      const errorHtml = generateErrorHtml(error.message);
      res.set('Content-Type', 'text/html');
      return res.status(500).send(errorHtml);
    }
    
    return res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ============================================================================
// API PARA APLICACI√ìN FLUTTER
// ============================================================================

/// **API PRINCIPAL** - Endpoint para obtener usuarios desde Flutter
/// 
/// Proporciona lista completa de usuarios activos para la aplicaci√≥n Flutter.
/// Optimizado para performance con 502+ usuarios y filtrado inteligente.
/// 
/// CARACTER√çSTICAS:
/// - Filtro autom√°tico por usuarios activos (isActive: true)
/// - Ordenamiento alfab√©tico por displayName
/// - Campos optimizados para UI Flutter
/// - Response JSON optimizado para transferencia
/// - Manejo de errores robusto
/// 
/// CAMPOS RETORNADOS POR USUARIO:
/// - email: Identificador √∫nico
/// - name: Nombre formateado para mostrar
/// - phone: Tel√©fono para contacto (puede ser vac√≠o)
/// - relacion: Tipo de membres√≠a
/// 
/// FILTROS APLICADOS:
/// - Solo usuarios con isActive: true
/// - Usuarios con email v√°lido
/// - Ordenamiento alfab√©tico por nombre
/// 
/// PERFORMANCE:
/// - Consulta indexada en Firestore
/// - Transferencia optimizada (solo campos necesarios)
/// - Cache recomendado en cliente Flutter
/// 
/// @param {Object} req - Request HTTP
/// @param {Object} res - Response con lista de usuarios
/// @returns {JSON} Lista de usuarios activos
/// @logs Estad√≠sticas de usuarios enviados
exports.getUsers = onRequest({
  cors: true,
}, async (req, res) => {
  try {
    console.log('üë• Obteniendo usuarios desde Firebase...');
    
    const db = admin.firestore();
    const usersSnapshot = await db.collection('users')
      .where('isActive', '==', true)
      .get();
    
    const users = [];
    usersSnapshot.forEach(doc => {
      const userData = doc.data();
      users.push({
        email: doc.id,
        name: userData.name || userData.displayName || 'Sin Nombre',
        phone: userData.phone || '',
        relacion: userData.relation || userData.relacion || ''
      });
    });
    
    // Ordenar alfab√©ticamente en JavaScript
    users.sort((a, b) => a.name.localeCompare(b.name));
    
    console.log(`üë• Enviando ${users.length} usuarios al frontend`);
    
    res.json({
      success: true,
      users: users,
      count: users.length,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo usuarios:', error);
    res.status(500).json({
      error: 'Error obteniendo usuarios',
      message: error.message
    });
  }
});

// ============================================================================
// FUNCI√ìN DE DIAGN√ìSTICO
// ============================================================================

/// **FUNCI√ìN DE DIAGN√ìSTICO** - Verificaci√≥n de Google Sheets API
/// 
/// Herramienta de diagn√≥stico para validar conectividad y estructura
/// de Google Sheets. √ötil para debugging y verificaci√≥n de configuraci√≥n.
/// 
/// VERIFICACIONES REALIZADAS:
/// - Conectividad con Google Sheets API
/// - Autenticaci√≥n con Service Account
/// - Estructura de la hoja "Maestro"
/// - Headers de columnas (espa√±ol vs ingl√©s)
/// - Datos de muestra de usuarios reales
/// - Validaci√≥n de campos esperados
/// 
/// INFORMACI√ìN RETORNADA:
/// - T√≠tulo del documento
/// - Nombre de la hoja
/// - N√∫mero de filas y columnas
/// - Lista de headers encontrados
/// - Headers faltantes (si los hay)
/// - Headers extra (si los hay)
/// - Muestra de 3 usuarios reales con datos formateados
/// - Timestamp de verificaci√≥n
/// 
/// CASOS DE USO:
/// - Debugging de problemas de sincronizaci√≥n
/// - Validaci√≥n despu√©s de cambios en Google Sheets
/// - Verificaci√≥n de estructura de datos
/// - Testing de conectividad
/// 
/// @param {Object} req - Request HTTP
/// @param {Object} res - Response con diagn√≥stico completo
/// @returns {JSON} Diagn√≥stico detallado de Google Sheets
/// @logs Proceso completo de verificaci√≥n
exports.verifyGoogleSheetsAPI = onRequest({
  cors: true,
}, async (req, res) => {
  try {
    console.log('üîç Verificando configuraci√≥n de Google Sheets API...');
    
    const SHEET_ID = '1A-8RvvgkHXUP-985So8CBJvDAj50w58EFML1CJEq2c4';
    const SHEET_NAME = 'Maestro';
    
    // Configuraci√≥n de credenciales
    const serviceAccountEmail = "sheets-api-service@cgpreservas.iam.gserviceaccount.com";
    const privateKey = `-----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDjOl2rzfM4gPIT
    LgW34/wl1TY/elF6ic6JP53hxHWJZeyjd3q5eFl9fWvdDaujo641ymq0LDeW7rFS
    QnDhM+EmEmQEz/r6YFmzRhzneIZXSJDjGdSPdV3LkIuhn6Fz/2eiL+k9qMAx5Tea
    fPlLikd4UHhw4yEMpnmkt/MBxxW77taoCTTR/Es6e+j0/qpMmdY/G/E0jgjIITwR
    TIRgzyPgGmax+JZleXqQXZYDPlThozXqMZiVr6+4OPkZod2EUwCki+L2vdh+0KqW
    xZejkjZ8Yc89YWzAr2QXGh2V2wy8h4DLk+z7hBw0hhmc6qpfRPw8I51S553E8Q1V
    3K0EKQc7AgMBAAECggEAFhLg76QxqP8JxSg24P7SS2CThQYebS9+82FNNpXtrxvK
    KbUdJHBXDTRGarJ9xodLkKkpxXf4LH7ilfGjYpU2HYsy0S7dHD6I6Dv66deRAWCo
    xo8HUapeorxXfCt0NT8N87kAyP8gMJiqVqUmWJrFx5/Vm23NE5wGfCRshHMxHtDt
    f0CNZwXvgRQdIGgIBGk9sVspSWKWLqSjCK+aknaBlOieNq3VwhdytBYdr0HukLl2
    kV4FGGtOu2QbLTEfI1gZk1L48wOrSquHPt++OnOGe7AHCgykoj4IIvt9UMi+yp9q
    v+2nsBr8P5ZR0PS8oLIXn6JQwjUD7sDc/JTI2TeA9QKBgQD6tV5P4R75he3wxjxX
    5muean28Y6VwkJzvh3rd3ABj/8NC8AV7N0/Gf1j9f3EkK+Gf29cGbn6CkR9YyXya
    kDu8ZbNZHyXyI3V+bOnnQC+71D11TcKKdoLtYN2oicxMEHPxw9kXSG+XoOc4DCX0
    bpiVYEHq5VYesrzeHcJmNb0VhwKBgQDoBiCf1gz3rGg+aNEP5LFChcqNf5aFtfdG
    ElP2VXoLWtVlSeteQR0lVoduBHhp4gwBBdNdW/O/sRvlOMqYAADz9+R9dTay5NfO
    61n3RX+Dg8BHRnfKwEkJwtEkwYFE3pKHRppMwJV6j7KHHv2gEX8Xg7j8+jGHSIlS
    Cy038tFtrQKBgBuW0eYgc/QplOGmLwXNSZKJTYTpwk782whQ9GhtyW03vBklqLTC
    hXjmkrhyydSdL5sT6jm+9xUPO0/d/GRV8vzshCwOjXJ0DH35JlRYb+hPluPNxtbN
    6+KLglkFsQG93cSBNOanBgC9qDQ2wgaAFTJ7AUYELtH6AWbAB6CP0VsJAoGACbqY
    C5uyF4CHLna+rWftdtidUamT6i9jGvERzDZxU6CPahvbXqxkSHiEXTyav/XWgwR3
    hGaipdsLTGVBOXZmk9RFJG2RyZaG5gpAT3n+iskves2doEbHyTz+AAiNHxImGr3/
    IlDA886qsbe+8sNJDPdc/l6PTRjhiSsmzj3EQlECgYEA5cN5s0gG1lMi3g6BYgJI
    ygMUk3gc51IdnybXyunvNOMwBSf82fQE3OVLuQBDXISOkQUHBnjnrQYt5Vf1JZGU
    15SNAe15MPdYJujryWGEqw3Q6qHc1XGJJAfxMMz8YbO06czV6TZK9GOdREzWnvnM
    XZTXYEu54CkpfjQSs3dMAgY=
    -----END PRIVATE KEY-----`;
    
    // Conectar y verificar
    const doc = new GoogleSpreadsheet(SHEET_ID);
    await doc.useServiceAccountAuth({
      client_email: serviceAccountEmail,
      private_key: privateKey.replace(/\n    /g, '\n'),
    });
    
    await doc.loadInfo();
    console.log('‚úÖ Autenticaci√≥n exitosa');
    console.log('üìä Documento cargado:', doc.title);
    
    // Verificar hoja
    const sheet = doc.sheetsByTitle[SHEET_NAME];
    if (!sheet) {
      const availableSheets = Object.keys(doc.sheetsByTitle);
      return res.status(404).json({
        error: `Hoja '${SHEET_NAME}' no encontrada`,
        availableSheets: availableSheets
      });
    }
    
    // Analizar estructura
    await sheet.loadHeaderRow();
    const headers = sheet.headerValues;
    
    const expectedHeaders = ['EMAIL', 'NOMBRE(S)', 'APELLIDO_PATERNO', 'APELLIDO_MATERNO', 'RUT/PASAPORTE', 'FECHA_NACIMIENTO', 'RELACION', 'CELULAR'];
    const missingHeaders = expectedHeaders.filter(header => !headers.includes(header));
    const extraHeaders = headers.filter(header => !expectedHeaders.includes(header));
    
    // Obtener muestra de datos
    const rows = await sheet.getRows({ limit: 3 });
    const sampleData = rows.map(row => ({
      email: row.EMAIL,
      nombres: row['NOMBRE(S)'],
      apellido_paterno: row.APELLIDO_PATERNO,
      apellido_materno: row.APELLIDO_MATERNO,
      relacion: row.RELACION,
      celular: row.CELULAR,
      formatted_name: formatUserName(
        row['NOMBRE(S)'] || '',
        row.APELLIDO_PATERNO || '',
        row.APELLIDO_MATERNO || ''
      )
    }));
    
    res.json({
      success: true,
      message: '‚úÖ Google Sheets API configurado correctamente',
      document: {
        title: doc.title,
        sheetName: sheet.title,
        rowCount: sheet.rowCount,
        columnCount: sheet.columnCount
      },
      headers: {
        found: headers,
        missing: missingHeaders,
        extra: extraHeaders,
        isValid: missingHeaders.length === 0
      },
      sampleData: sampleData,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error verificando Google Sheets API:', error);
    res.status(500).json({
      error: 'Error al verificar Google Sheets API',
      message: error.message,
      suggestions: [
        'Verificar que las credenciales est√©n correctamente configuradas',
        'Verificar que la cuenta de servicio tenga acceso a la planilla',
        'Verificar que el ID de la planilla sea correcto'
      ]
    });
  }
});

// ============================================================================
// FUNCIONES AUXILIARES
// ============================================================================

/// Formateo de nombres seg√∫n est√°ndar del Club de Golf Papudo
/// 
/// Convierte nombres completos a formato est√°ndar usado en toda la aplicaci√≥n.
/// Procesa nombres m√∫ltiples y apellidos seg√∫n convenci√≥n chilena.
/// 
/// ALGORITMO:
/// 1. Primer nombre completo
/// 2. Inicial segundo nombre (sin punto) si existe
/// 3. Apellido paterno completo
/// 4. Inicial apellido materno (sin punto) si existe
/// 
/// EJEMPLOS:
/// - "FELIPE", "GARCIA", "BENITEZ" ‚Üí "FELIPE GARCIA B"
/// - "ANA MARIA", "BELMAR", "PEREZ" ‚Üí "ANA M BELMAR P"
/// - "CARLOS", "RODRIGUEZ", "" ‚Üí "CARLOS RODRIGUEZ"
/// 
/// @param {string} nombres - Nombres de pila (puede ser m√∫ltiple)
/// @param {string} apellidoPaterno - Apellido paterno
/// @param {string} apellidoMaterno - Apellido materno (opcional)
/// @returns {string} Nombre formateado en may√∫sculas
function formatUserName(nombres, apellidoPaterno, apellidoMaterno) {
  // Procesar nombres: primer nombre + inicial segundo nombre (sin punto)
  const nombresParts = (nombres || '').trim().split(/\s+/);
  const primerNombre = nombresParts[0] || '';
  const inicialSegundoNombre = nombresParts.length > 1 ? nombresParts[1].charAt(0) : '';
  
  // Construir parte de nombres
  const nombresFormateados = inicialSegundoNombre ? 
    `${primerNombre} ${inicialSegundoNombre}` : 
    primerNombre;
  
  // Apellido paterno completo
  const apellidoPaternoCompleto = (apellidoPaterno || '').trim();
  
  // Apellido materno: solo inicial (sin punto)
  const inicialApellidoMaterno = (apellidoMaterno || '').trim().charAt(0);
  
  // Construir nombre completo
  const parts = [nombresFormateados, apellidoPaternoCompleto];
  
  if (inicialApellidoMaterno) {
    parts.push(inicialApellidoMaterno);
  }
  
  return parts.filter(part => part).join(' ').toUpperCase();
}

/// Formateo de fechas para emails en espa√±ol chileno
/// 
/// Convierte fechas ISO a formato legible en espa√±ol con timezone Chile.
/// 
/// @param {string} dateString - Fecha en formato ISO (YYYY-MM-DD)
/// @returns {string} Fecha formateada (ej: "mi√©rcoles, 24 de julio de 2025")
function formatDate(dateString) {
  try {
    if (!dateString) {
      dateString = new Date().toISOString().split('T')[0];
    }
    
    const dateStr = String(dateString).trim();
    let date;
    
    if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
      date = new Date(dateStr + 'T12:00:00-03:00');
    } else {
      date = new Date(dateStr);
    }
    
    if (isNaN(date.getTime())) {
      date = new Date();
    }
    
    const options = { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      timeZone: 'America/Santiago'
    };
    
    return date.toLocaleDateString('es-ES', options);
    
  } catch (error) {
    console.error('‚ùå Error en formatDate:', error);
    const fallbackDate = new Date();
    return fallbackDate.toLocaleDateString('es-ES', {
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      timeZone: 'America/Santiago'
    });
  }
}

/// C√°lculo de hora de fin de reserva (duraci√≥n 1.5 horas)
/// 
/// @param {string} startTime - Hora de inicio (HH:MM)
/// @returns {string} Hora de fin (HH:MM)
function getEndTime(startTime) {
  try {
    if (!startTime || !startTime.includes(':')) {
      return 'N/A';
    }
    
    const timeParts = startTime.split(':');
    if (timeParts.length < 2) {
      return 'N/A';
    }
    
    const hours = parseInt(timeParts[0], 10);
    const minutes = parseInt(timeParts[1], 10);
    
    if (isNaN(hours) || isNaN(minutes)) {
      return 'N/A';
    }
    
    const endHours = hours + 1;
    const endMinutes = minutes + 30;
    
    let finalHours = endHours;
    let finalMinutes = endMinutes;
    
    if (finalMinutes >= 60) {
      finalHours = endHours + 1;
      finalMinutes = endMinutes - 60;
    }
    
    return `${String(finalHours).padStart(2, '0')}:${String(finalMinutes).padStart(2, '0')}`;
    
  } catch (error) {
    console.error('‚ùå Error en getEndTime:', error);
    return 'N/A';
  }
}

/// Mapeo de IDs de cancha a nombres amigables
/// 
/// @param {string} courtId - ID t√©cnico de cancha
/// @returns {string} Nombre amigable de la cancha
// üîµ MAPEO DE CANCHAS P√ÅDEL
function getPadelCourtName(courtId) {
  const courtStr = String(courtId).trim().toLowerCase();
  const padelCourts = {
    'court1': 'PITE',
    'court_1': 'PITE',
    'padel_court_1': 'PITE',
    'court2': 'LILEN', 
    'court_2': 'LILEN',
    'padel_court_2': 'LILEN',
    'court3': 'PLAIYA',
    'court_3': 'PLAIYA',
    'padel_court_3': 'PLAIYA',
    'court4': 'PEUMO',
    'court_4': 'PEUMO',
    'padel_court_4': 'PEUMO'
  };
  return padelCourts[courtStr] || courtId;
}

// üéæ MAPEO DE CANCHAS TENIS
function getTennisCourtName(courtId) {
  const courtStr = String(courtId).trim().toLowerCase();
  const tennisCourts = {
    'tennis_court_1': 'Cancha 1',
    'tennis_court_2': 'Cancha 2', 
    'tennis_court_3': 'Cancha 3',
    'tennis_court_4': 'Cancha 4'
  };
  return tennisCourts[courtStr] || courtId;
}

// MAPEO DE CANCHAS GOLF
function getGolfHoyoName(courtId) {
  switch (courtId) {
    case 'golf_tee_1':
      return 'Hoyo 1';
    case 'golf_tee_10':
      return 'Hoyo 10';
    default:
      return 'Campo de Golf';
  }
}

// üéØ DETECTAR DEPORTE DESDE COURT ID
function getSportFromCourtId(courtId) {
  const courtStr = String(courtId).trim().toLowerCase();
  
  if (courtStr.startsWith('tennis_') || courtStr.includes('tennis')) {
    return 'TENIS';
  } else if (courtStr.startsWith('golf_') || courtStr.includes('golf') || courtStr.includes('tee')) {
    return 'GOLF';
  } else if (courtStr.startsWith('padel_') || courtStr.includes('padel') || 
             courtStr.startsWith('court') || courtStr.match(/^court[_]?\d+$/)) {
    return 'PADEL';
  }
  return 'PADEL'; // Default fallback
}

// Funci√≥n auxiliar para calcular hora de finalizaci√≥n de golf (duraci√≥n 12 minutos)
function getGolfEndTime(startTime) {
  if (!startTime) return '';
  
  const [hours, minutes] = startTime.split(':').map(Number);
  const startDate = new Date(2024, 0, 1, hours, minutes);
  const endDate = new Date(startDate.getTime() + 12 * 60000); // 12 minutos despu√©s
  
  return `${String(endDate.getHours()).padStart(2, '0')}:${String(endDate.getMinutes()).padStart(2, '0')}`;
}

// ============================================================================
// TEMPLATES HTML PARA EMAILS
// ============================================================================

/// Genera template HTML para emails de confirmaci√≥n de reserva
/// 
/// Template responsive con branding corporativo del Club de Golf Papudo.
/// Incluye toda la informaci√≥n de la reserva y bot√≥n de cancelaci√≥n individual.
/// 
/// @param {Object} booking - Datos de la reserva
/// @param {string} organizerName - Nombre del organizador
/// @param {boolean} isVisitorBooking - Si incluye usuarios VISITA
/// @param {string} email - Email del destinatario
/// @returns {string} HTML completo del email
// üîµ TEMPLATE EMAIL P√ÅDEL
// üéæ TEMPLATE EMAIL TENIS CON LOGO CLUB
function generateTennisEmailTemplate(booking, organizerName, isVisitorBooking = false, email) {
  const formattedDate = formatDate(booking.date);
  const courtName = getTennisCourtName(booking.courtId);
  const endTime = getEndTime(booking.time);

  // Mensaje especial para reservas con usuarios VISITA
  const visitorMessage = isVisitorBooking ? `
    <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 16px; margin: 20px 0;">
      <div style="display: flex; align-items: center; margin-bottom: 8px;">
        <div style="background-color: #f39c12; color: white; border-radius: 50%; width: 24px; height: 24px; display: inline-flex; align-items: center; justify-content: center; margin-right: 8px; font-size: 14px; font-weight: bold;">!</div>
        <strong style="color: #856404;">Informaci√≥n para el organizador</strong>
      </div>
      <p style="margin: 0; color: #856404; line-height: 1.4;">
        Esta reserva incluye jugadores invitados (VISITA). Recuerda coordinar el pago correspondiente con la Administraci√≥n del Club ANTES de la hora reservada.
      </p>
    </div>
  ` : '';

  // Generar lista de jugadores
  const playersHtml = booking.players.map((player, index) => {
    const isOrganizer = index === 0;
    return `
      <div style="padding: 8px 0; color: #047857; font-size: 16px;">
        <span style="margin-right: 8px;">${isOrganizer ? 'üèÜ' : '‚Ä¢'}</span>
        <strong>${player.name || player.displayName || 'Jugador'}</strong>
        ${isOrganizer ? ' (Organizador)' : ''}
      </div>
    `;
  }).join("");

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Reserva de Tenis Confirmada - Club de Golf Papudo</title>
    </head>
    <body style="margin: 0; padding: 0; background-color: #f5f5f5; font-family: Arial, sans-serif;">
      <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
        <tr>
          <td style="padding: 20px 0;">
            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="600" style="margin: 0 auto; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

              <!-- HEADER TIERRA BATIDA TENIS CON LOGO -->
              <tr>
                <td style="background: linear-gradient(135deg, #D2691E 0%, #B8860B 100%); padding: 40px 20px; text-align: center; border-radius: 12px 12px 0 0;">
                  
                  <!-- TABLA PARA LOGO + TEXTO (COMPATIBLE CON EMAILS) -->
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" style="margin: 0 auto;">
                    <tr>
                      <td style="vertical-align: middle; padding-right: 15px;">
                        <img src="https://raw.githubusercontent.com/paddlepapudo/cgp_reservas/main/assets/images/club_logo.png" 
                             alt="Club de Golf Papudo" 
                             style="width: 50px; height: 50px; border-radius: 50%; border: 2px solid white; display: block;">
                      </td>
                      <td style="vertical-align: middle; text-align: left;">
                        <h1 style="color: white; font-size: 32px; font-weight: bold; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.6);">
                          Club de Golf Papudo
                        </h1>
                        <p style="color: #FFFFFF; margin: 5px 0 0 0; font-size: 18px; text-shadow: 1px 1px 2px rgba(0,0,0,0.4);">
                          Reserva de Tenis Confirmada
                        </p>
                      </td>
                    </tr>
                  </table>
                  
                </td>
              </tr>

              <!-- CONTENIDO -->
              <tr>
                <td style="padding: 40px;">
                  <h2 style="color: #2d3748; font-size: 24px; margin: 0 0 20px 0;">
                    ¬°Hola ${organizerName.toUpperCase()}!
                  </h2>
                  <p style="color: #4a5568; font-size: 16px; line-height: 1.6; margin: 0 0 30px 0;">
                    Tu reserva de tenis ha sido confirmada exitosamente. Te esperamos.
                  </p>

                  ${visitorMessage}
                </td>
              </tr>

              <!-- DETALLES RESERVA -->
              <tr>
                <td style="padding: 0 40px 40px 40px;">
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #D2691E; background-color: #f8fafc; border-radius: 8px;">
                    <tr>
                      <td style="padding: 24px;">
                        <h3 style="color: #8B4513; margin: 0 0 16px 0; font-size: 18px;">
                          üìÖ Detalles de la Reserva:
                        </h3>
                        <div style="color: #8B4513; font-size: 16px; line-height: 1.8;">
                          <div><strong>üìÖ Fecha:</strong> ${formattedDate}</div>
                          <div><strong>‚è∞ Hora:</strong> ${booking.time} - ${endTime}</div>
                          <div><strong>üéæ Cancha:</strong> ${courtName}</div>
                        </div>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- JUGADORES -->
              <tr>
                <td style="padding: 0 40px 20px 40px;">
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #10b981; background-color: #f0fdf4; border-radius: 8px;">
                    <tr>
                      <td style="padding: 20px;">
                        <h3 style="color: #065f46; margin: 0 0 16px 0; font-size: 18px;">
                          üë• Jugadores (${booking.players.length}/4):
                        </h3>
                        <div>
                          ${playersHtml}
                        </div>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- BOT√ìN CANCELAR -->
              <tr>
                <td style="padding: 0 40px 20px 40px; text-align: center;">
                  <a href="https://us-central1-cgpreservas.cloudfunctions.net/cancelBooking?id=${booking.id || `${booking.courtId || booking.courtId}-${booking.date}-${(booking.timeSlot || booking.time || '').replace(/:/g, '')}`}&email=${encodeURIComponent(email)}" style="background: #dc2626; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
                    ‚ùå Cancelar mi Participaci√≥n
                  </a>
                </td>
              </tr>

              <!-- FOOTER -->
              <tr>
                <td style="background: #f8fafc; padding: 30px 40px; text-align: center; color: #64748b; font-size: 14px; border-top: 1px solid #e2e8f0; border-radius: 0 0 12px 12px;">
                  <p style="margin: 0; line-height: 1.6;">
                    <strong>Club de Golf Papudo</strong> ‚Ä¢ Desde 1932<br>
                    üìß paddlepapudo@gmail.com<br>
                    üìç Miraflores s/n - Papudo, Valpara√≠so<br>
                    üåê clubgolfpapudo.cl
                  </p>
                </td>
              </tr>

            </table>
          </td>
        </tr>
      </table>
    </body>
    </html>
  `;
}

function generatePadelEmailTemplate(booking, organizerName, isVisitorBooking = false, email) {
  const formattedDate = formatDate(booking.date);
  const courtName = getPadelCourtName(booking.courtId);
  const endTime = getEndTime(booking.time);

  // Mensaje especial para reservas con usuarios VISITA
  const visitorMessage = isVisitorBooking ? `
    <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 16px; margin: 20px 0;">
      <div style="display: flex; align-items: center; margin-bottom: 8px;">
        <div style="background-color: #f39c12; color: white; border-radius: 50%; width: 24px; height: 24px; display: inline-flex; align-items: center; justify-content: center; margin-right: 8px; font-size: 14px; font-weight: bold;">!</div>
        <strong style="color: #856404;">Informaci√≥n para el organizador</strong>
      </div>
      <p style="margin: 0; color: #856404; line-height: 1.4;">
        Esta reserva incluye jugadores invitados (VISITA). Recuerda coordinar el pago correspondiente con la Administraci√≥n del Club ANTES de la hora reservada.
      </p>
    </div>
  ` : '';

  // Generar lista de jugadores
  const playersHtml = booking.players.map((player, index) => {
    const isOrganizer = index === 0;
    return `
      <div style="padding: 8px 0; color: #1565C0; font-size: 16px;">
        <span style="margin-right: 8px;">${isOrganizer ? 'üèÜ' : '‚Ä¢'}</span>
        <strong>${player.name || player.displayName || 'Jugador'}</strong>
        ${isOrganizer ? ' (Organizador)' : ''}
      </div>
    `;
  }).join("");

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Reserva de P√°del Confirmada - Club de Golf Papudo</title>
    </head>
    <body style="margin: 0; padding: 0; background-color: #f5f5f5; font-family: Arial, sans-serif;">
      <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
        <tr>
          <td style="padding: 20px 0;">
            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="600" style="margin: 0 auto; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

              <!-- HEADER AZUL P√ÅDEL CON LOGO -->
              <tr>
                <td style="background: linear-gradient(135deg, #2E7AFF 0%, #1E5AFF 100%); padding: 40px 20px; text-align: center; border-radius: 12px 12px 0 0;">
                  
                  <!-- TABLA PARA LOGO + TEXTO (COMPATIBLE CON EMAILS) -->
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" style="margin: 0 auto;">
                    <tr>
                      <td style="vertical-align: middle; padding-right: 15px;">
                        <img src="https://raw.githubusercontent.com/paddlepapudo/cgp_reservas/main/assets/images/club_logo.png" 
                             alt="Club de Golf Papudo" 
                             style="width: 50px; height: 50px; border-radius: 50%; border: 2px solid white; display: block;">
                      </td>
                      <td style="vertical-align: middle; text-align: left;">
                        <h1 style="color: white; font-size: 32px; font-weight: bold; margin: 0;">
                          Club de Golf Papudo
                        </h1>
                        <p style="color: #e3f2fd; margin: 5px 0 0 0; font-size: 18px;">
                          Reserva de P√°del Confirmada
                        </p>
                      </td>
                    </tr>
                  </table>
                  
                </td>
              </tr>

              <!-- CONTENIDO -->
              <tr>
                <td style="padding: 40px;">
                  <h2 style="color: #2d3748; font-size: 24px; margin: 0 0 20px 0;">
                    ¬°Hola ${organizerName.toUpperCase()}!
                  </h2>
                  <p style="color: #4a5568; font-size: 16px; line-height: 1.6; margin: 0 0 30px 0;">
                    Tu reserva de p√°del ha sido confirmada exitosamente. Te esperamos.
                  </p>

                  ${visitorMessage}
                </td>
              </tr>

              <!-- DETALLES RESERVA -->
              <tr>
                <td style="padding: 0 40px 40px 40px;">
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #2E7AFF; background-color: #f0f7ff; border-radius: 8px;">
                    <tr>
                      <td style="padding: 24px;">
                        <h3 style="color: #1565C0; margin: 0 0 16px 0; font-size: 18px;">
                          üìÖ Detalles de la Reserva:
                        </h3>
                        <div style="color: #1565C0; font-size: 16px; line-height: 1.8;">
                          <div><strong>üìÖ Fecha:</strong> ${formattedDate}</div>
                          <div><strong>‚è∞ Hora:</strong> ${booking.time} - ${endTime}</div>
                          <div><strong>üèì Cancha:</strong> ${courtName}</div>
                        </div>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- JUGADORES -->
              <tr>
                <td style="padding: 0 40px 20px 40px;">
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #10b981; background-color: #f0fdf4; border-radius: 8px;">
                    <tr>
                      <td style="padding: 20px;">
                        <h3 style="color: #065f46; margin: 0 0 16px 0; font-size: 18px;">
                          üë• Jugadores (${booking.players.length}/4):
                        </h3>
                        <div>
                          ${playersHtml}
                        </div>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- BOT√ìN CANCELAR -->
              <tr>
                <td style="padding: 0 40px 20px 40px; text-align: center;">
                  <a href="https://us-central1-cgpreservas.cloudfunctions.net/cancelBooking?id=${booking.id || `${booking.courtId || booking.courtId}-${booking.date}-${(booking.timeSlot || booking.time || '').replace(/:/g, '')}`}&email=${encodeURIComponent(email)}" style="background: #dc2626; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
                    ‚ùå Cancelar mi Participaci√≥n
                  </a>
                </td>
              </tr>

              <!-- FOOTER -->
              <tr>
                <td style="background: #f8fafc; padding: 30px 40px; text-align: center; color: #64748b; font-size: 14px; border-top: 1px solid #e2e8f0; border-radius: 0 0 12px 12px;">
                  <p style="margin: 0; line-height: 1.6;">
                    <strong>Club de Golf Papudo</strong> ‚Ä¢ Desde 1932<br>
                    üìß paddlepapudo@gmail.com<br>
                    üìç Miraflores s/n - Papudo, Valpara√≠so<br>
                    üåê clubgolfpapudo.cl
                  </p>
                </td>
              </tr>

            </table>
          </td>
        </tr>
      </table>
    </body>
    </html>
  `;
}

function generateGolfEmailTemplate(booking, organizerName, isVisitorBooking = false, email) {
  const formattedDate = formatDate(booking.date);
  const hoyoName = getGolfHoyoName(booking.courtId);
  const endTime = getGolfEndTime(booking.time);

  // Mensaje especial para reservas con usuarios VISITA
  const visitorMessage = isVisitorBooking ? `
    <div style="background-color: #fff8e1; border: 1px solid #ffcc02; border-radius: 8px; padding: 16px; margin: 20px 0;">
      <div style="display: flex; align-items: center; margin-bottom: 8px;">
        <div style="background-color: #ff9800; color: white; border-radius: 50%; width: 24px; height: 24px; display: inline-flex; align-items: center; justify-content: center; margin-right: 8px; font-size: 14px; font-weight: bold;">!</div>
        <strong style="color: #f57f17;">Informaci√≥n para el organizador</strong>
      </div>
      <p style="margin: 0; color: #f57f17; line-height: 1.4;">
        Esta reserva incluye jugadores invitados (VISITA). Recuerda coordinar el pago correspondiente con la Administraci√≥n del Club ANTES de la hora reservada.
      </p>
    </div>
  ` : '';

  // Generar lista de jugadores (golf permite 1-4 jugadores)
  const playersHtml = booking.players.map((player, index) => {
    const isOrganizer = index === 0;
    return `
      <div style="padding: 8px 0; color: #2E7D32; font-size: 16px;">
        <span style="margin-right: 8px;">${isOrganizer ? '‚õ≥' : '‚Ä¢'}</span>
        <strong>${player.name || player.displayName || 'Jugador'}</strong>
        ${isOrganizer ? ' (Organizador)' : ''}
      </div>
    `;
  }).join("");

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Reserva de Golf Confirmada - Club de Golf Papudo</title>
    </head>
    <body style="margin: 0; padding: 0; background-color: #f5f5f5; font-family: Arial, sans-serif;">
      <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
        <tr>
          <td style="padding: 20px 0;">
            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="600" style="margin: 0 auto; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

              <!-- HEADER VERDE GOLF CON LOGO -->
              <tr>
                <td style="background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%); padding: 40px 20px; text-align: center; border-radius: 12px 12px 0 0;">
                  
                  <!-- TABLA PARA LOGO + TEXTO (COMPATIBLE CON EMAILS) -->
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" style="margin: 0 auto;">
                    <tr>
                      <td style="vertical-align: middle; padding-right: 15px;">
                        <img src="https://raw.githubusercontent.com/paddlepapudo/cgp_reservas/main/assets/images/club_logo.png" 
                             alt="Club de Golf Papudo" 
                             style="width: 50px; height: 50px; border-radius: 50%; border: 2px solid white; display: block;">
                      </td>
                      <td style="vertical-align: middle; text-align: left;">
                        <h1 style="color: white; font-size: 32px; font-weight: bold; margin: 0;">
                          Club de Golf Papudo
                        </h1>
                        <p style="color: #e8f5e8; margin: 5px 0 0 0; font-size: 18px;">
                          Reserva de Golf Confirmada
                        </p>
                      </td>
                    </tr>
                  </table>
                  
                </td>
              </tr>

              <!-- CONTENIDO -->
              <tr>
                <td style="padding: 40px;">
                  <h2 style="color: #2d3748; font-size: 24px; margin: 0 0 20px 0;">
                    ¬°Hola ${organizerName.toUpperCase()}!
                  </h2>
                  <p style="color: #4a5568; font-size: 16px; line-height: 1.6; margin: 0 0 30px 0;">
                    Tu reserva de golf ha sido confirmada exitosamente. Te esperamos.
                  </p>

                  ${visitorMessage}
                </td>
              </tr>

              <!-- DETALLES RESERVA -->
              <tr>
                <td style="padding: 0 40px 40px 40px;">
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #4CAF50; background-color: #f1f8e9; border-radius: 8px;">
                    <tr>
                      <td style="padding: 24px;">
                        <h3 style="color: #2E7D32; margin: 0 0 16px 0; font-size: 18px;">
                          ‚õ≥ Detalles de la Reserva:
                        </h3>
                        <div style="color: #2E7D32; font-size: 16px; line-height: 1.8;">
                          <div><strong>üìÖ Fecha:</strong> ${formattedDate}</div>
                          <div><strong>‚è∞ Hora:</strong> ${booking.time} - ${endTime}</div>
                          <div><strong>‚õ≥ Hoyo:</strong> ${hoyoName}</div>
                        </div>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- JUGADORES -->
              <tr>
                <td style="padding: 0 40px 20px 40px;">
                  <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #66BB6A; background-color: #f1f8e9; border-radius: 8px;">
                    <tr>
                      <td style="padding: 20px;">
                        <h3 style="color: #1B5E20; margin: 0 0 16px 0; font-size: 18px;">
                          üë• Jugadores (${booking.players.length}/4):
                        </h3>
                        <div>
                          ${playersHtml}
                        </div>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- BOT√ìN CANCELAR -->
              <tr>
                <td style="padding: 0 40px 20px 40px; text-align: center;">
                  <a href="https://us-central1-cgpreservas.cloudfunctions.net/cancelBooking?id=${booking.id || `${booking.courtId || booking.courtId}-${booking.date}-${(booking.timeSlot || booking.time || '').replace(/:/g, '')}`}&email=${encodeURIComponent(email)}" style="background: #dc2626; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
                    ‚ùå Cancelar mi Participaci√≥n
                  </a>
                </td>
              </tr>

              <!-- FOOTER -->
              <tr>
                <td style="background: #f8fafc; padding: 30px 40px; text-align: center; color: #64748b; font-size: 14px; border-top: 1px solid #e2e8f0; border-radius: 0 0 12px 12px;">
                  <p style="margin: 0; line-height: 1.6;">
                    <strong>Club de Golf Papudo</strong> ‚Ä¢ Desde 1932<br>
                    üìß paddlepapudo@gmail.com<br>
                    üìç Miraflores s/n - Papudo, Valpara√≠so<br>
                    üåê clubgolfpapudo.cl
                  </p>
                </td>
              </tr>

            </table>
          </td>
        </tr>
      </table>
    </body>
    </html>
  `;
}

// üéØ FUNCI√ìN PRINCIPAL ACTUALIZADA
function generateBookingEmailHtml(booking, organizerName, isVisitorBooking = false, email) {
  const sport = getSportFromCourtId(booking.courtId);
  
  console.log(`üìß Generando email para deporte: ${sport}, cancha: ${booking.courtId}`);
  
  if (sport === 'TENIS') {
    return generateTennisEmailTemplate(booking, organizerName, isVisitorBooking, email);
  } else if (sport === 'GOLF') {
    return generateGolfEmailTemplate(booking, organizerName, isVisitorBooking, email);
  } else {
    return generatePadelEmailTemplate(booking, organizerName, isVisitorBooking, email);
  }
}

/// Env√≠a notificaci√≥n de cancelaci√≥n a jugador restante
/// 
/// @param {Object} remainingPlayer - Jugador que recibe la notificaci√≥n
/// @param {Object} reservationInfo - Informaci√≥n completa de la reserva
/// @returns {Promise} Resultado del env√≠o
async function sendCancellationNotification(remainingPlayer, reservationInfo) {
  try {
    const {
      date,
      timeSlot,
      courtId,
      cancelingPlayerName,
      cancelingPlayerEmail,
      remainingPlayers
    } = reservationInfo;

    const formattedDate = formatDate(date);
    const endTime = getEndTime(timeSlot);
    const courtName = courtId === 'golf_tee_1' ? 'Hoyo 1' : 
                  courtId === 'golf_tee_10' ? 'Hoyo 10' :
                  courtId.startsWith('tennis_') ? 'Cancha de Tenis' : 
                  'Cancha de P√°del';

    const emailHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Jugador se retir√≥ - Club de Golf Papudo</title>
      </head>
      <body style="margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f5f5f5;">
        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
          <tr>
            <td style="padding: 20px 0;">
              <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="600" style="margin: 0 auto; background-color: white; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                
                <!-- HEADER -->
                <tr>
                  <td style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); padding: 30px 40px; border-radius: 12px 12px 0 0;">
                    <h1 style="color: white; margin: 0; font-size: 24px; text-align: center;">
                      ‚ö†Ô∏è Cambio en tu Reserva
                    </h1>
                    <p style="color: #fde68a; margin: 5px 0 0 0; font-size: 16px; text-align: center;">
                      Club de Golf Papudo
                    </p>
                  </td>
                </tr>

                <!-- CONTENIDO -->
                <tr>
                  <td style="padding: 40px;">
                    <h2 style="color: #f59e0b; margin: 0 0 20px 0; font-size: 20px;">
                      Hola ${remainingPlayer.name || remainingPlayer.displayName || 'Jugador'},
                    </h2>
                    <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 24px 0;">
                      Te informamos que <strong>${cancelingPlayerName}</strong> se retir√≥ de la reserva de P√°del en la que participas.
                    </p>
                    <p style="color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 24px 0;">
                      La reserva sigue <strong>activa</strong> con los jugadores restantes.
                    </p>

                    <!-- DETALLES RESERVA -->
                    <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #3b82f6; background-color: #eff6ff; border-radius: 8px; margin: 20px 0;">
                      <tr>
                        <td style="padding: 20px;">
                          <h3 style="color: #1e40af; margin: 0 0 16px 0; font-size: 18px;">
                            üìÖ Detalles de la Reserva:
                          </h3>
                          <div style="color: #1e3a8a; font-size: 16px; line-height: 1.8;">
                            <div><strong>üìÖ Fecha:</strong> ${formattedDate}</div>
                            <div><strong>‚è∞ Horario:</strong> ${timeSlot} - ${endTime}</div>
                            <div><strong>ü§æ Cancha:</strong> ${courtName}</div>
                            <div><strong>üë§ Se retir√≥:</strong> ${cancelingPlayerName}</div>
                          </div>
                        </td>
                      </tr>
                    </table>

                    <!-- JUGADORES ACTUALES -->
                    <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #10b981; background-color: #f0fdf4; border-radius: 8px; margin: 20px 0;">
                      <tr>
                        <td style="padding: 20px;">
                          <h3 style="color: #065f46; margin: 0 0 16px 0; font-size: 18px;">
                            üë• Jugadores Actuales (${remainingPlayers.length}/4):
                          </h3>
                          ${remainingPlayers.map(player => {
                            const playerName = player.name || player.displayName || 'Jugador';
                            return `
                              <div style="padding: 8px 0; color: #047857; font-size: 16px;">
                                <span style="margin-right: 8px;">‚Ä¢</span>
                                <strong>${playerName}</strong>
                              </div>
                            `;
                          }).join('')}
                          
                          ${remainingPlayers.length < 4 ? `
                            <div style="margin-top: 16px; padding: 12px; background-color: #dcfce7; border-radius: 6px; color: #166534;">
                              <strong>üí° Tip:</strong> Puedes contactar al club para agregar m√°s jugadores.
                            </div>
                          ` : ''}
                        </td>
                      </tr>
                    </table>

                    <!-- CONTACTO -->
                    <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="border-left: 4px solid #f59e0b; background-color: #fffbeb; border-radius: 8px;">
                      <tr>
                        <td style="padding: 20px;">
                          <h3 style="color: #92400e; margin: 0 0 16px 0; font-size: 18px;">
                            üìû Contacto del jugador que se retir√≥:
                          </h3>
                          <p style="color: #a16207; font-size: 16px; margin: 0;">
                            <strong>${cancelingPlayerName}</strong><br>
                            <a href="mailto:${cancelingPlayerEmail}" style="color: #d97706;">${cancelingPlayerEmail}</a>
                          </p>
                        </td>
                      </tr>
                    </table>
                  </td>
                </tr>

                <!-- FOOTER -->
                <tr>
                  <td style="padding: 30px 40px; border-top: 1px solid #e5e7eb; background-color: #f9fafb; border-radius: 0 0 12px 12px;">
                    <p style="color: #6b7280; font-size: 14px; text-align: center; margin: 0;">
                      Club de Golf Papudo - Sistema de Reservas P√°del<br>
                      üìß paddlepapudo@gmail.com
                    </p>
                  </td>
                </tr>

              </table>
            </td>
          </tr>
        </table>
      </body>
      </html>
    `;

    const transporter = createTransporter();
    const mailOptions = {
      from: {
        name: 'Club de Golf Papudo',
        address: 'paddlepapudo@gmail.com'
      },
      to: remainingPlayer.email,
      subject: `‚ö†Ô∏è Jugador se retir√≥ de reserva - ${formattedDate}`,
      html: emailHtml
    };

    await transporter.sendMail(mailOptions);
    console.log(`üìß Notificaci√≥n de cancelaci√≥n enviada a: ${remainingPlayer.email}`);
    
  } catch (error) {
    console.error(`‚ùå Error enviando notificaci√≥n a ${remainingPlayer.email}:`, error);
    throw error;
  }
}

/// Genera p√°gina HTML de confirmaci√≥n de cancelaci√≥n
/// 
/// @param {string} bookingId - ID de la reserva cancelada
/// @param {string} playerEmail - Email del jugador que cancel√≥
/// @returns {string} HTML de confirmaci√≥n
function generateCancellationConfirmationHtml(bookingId, playerEmail) {
  // Funciones helper locales
  function getCourtDisplayName(courtId) {
    const courtMap = {
      'padel_court_1': 'PITE',
      'padel_court_2': 'LILEN', 
      'padel_court_3': 'PLAIYA',
      'tennis_court_1': 'Cancha 1',
      'tennis_court_2': 'Cancha 2',
      'tennis_court_3': 'Cancha 3',
      'tennis_court_4': 'Cancha 4',
      'golf_tee_1': 'Hoyo 1',
      'golf_tee_10': 'Hoyo 10'
    };
    return courtMap[courtId] || courtId;
  }

  function extractCourtFromBookingId(bookingId) {
    const parts = bookingId.split('-');
    if (parts.length >= 4) {
      const datePart = parts.slice(-3).join('-');
      const courtId = bookingId.replace('-' + datePart, '');
      return courtId;
    }
    return bookingId;
  }

  // Extraer informaci√≥n del bookingId
  const parts = bookingId.split('-');
  const courtId = parts[0]; // "padel_court_1"
  const courtDisplayName = getCourtDisplayName(courtId);
  const date = `${parts[1]}-${parts[2]}-${parts[3]}`; // "2025-08-21"
  const time = parts[4] || '0000';
  const formattedTime = time.substring(0, 2) + ':' + time.substring(2, 4);

  return `
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Cancelaci√≥n Exitosa - Club de Golf Papudo</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                text-align: center;
                max-width: 500px;
                width: 100%;
            }
            .success-icon {
                font-size: 4rem;
                margin-bottom: 20px;
            }
            h1 {
                color: #2c3e50;
                margin-bottom: 10px;
                font-size: 2rem;
            }
            .booking-details {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                margin: 20px 0;
                border-left: 4px solid #2E7AFF;
            }
            .court-info {
                font-size: 16px;
                line-height: 1.6;
                margin-bottom: 10px;
                text-align: left;
            }
            .court-info strong {
                color: #2E7AFF;
                font-weight: 600;
            }
            .booking-reference {
                font-size: 12px;
                color: #6c757d;
                border-top: 1px solid #dee2e6;
                padding-top: 10px;
                margin-top: 10px;
            }
            .message {
                color: #666;
                margin: 20px 0;
                line-height: 1.6;
            }
            .contact-btn {
                background: #2E7AFF;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 25px;
                text-decoration: none;
                display: inline-block;
                margin-top: 20px;
                transition: background 0.3s;
            }
            .contact-btn:hover {
                background: #1E5AFF;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="success-icon">‚úÖ</div>
            <h1>Cancelaci√≥n Exitosa</h1>
            
            <div class="booking-details">
                <div class="court-info">
                    <strong>Cancha:</strong> ${courtDisplayName}<br>
                    <strong>Fecha:</strong> ${date}<br>
                    <strong>Hora:</strong> ${formattedTime}<br>
                    <strong>Jugador:</strong> ${decodeURIComponent(playerEmail)}
                </div>
                <div class="booking-reference">
                    <small>Referencia: ${bookingId}</small>
                </div>
            </div>
            
            <div class="message">
                Tu reserva ha sido cancelada exitosamente. 
                Los dem√°s jugadores han sido notificados autom√°ticamente.
            </div>
            
            <a href="mailto:info@clubdegolfpapudo.cl" class="contact-btn">
                üìß Contactar Club
            </a>
        </div>
    </body>
    </html>
  `;
}

/// Genera p√°gina HTML de error
/// 
/// @param {string} errorMessage - Mensaje de error
/// @returns {string} HTML de error
function generateErrorHtml(errorMessage) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Error - Club de Golf Papudo</title>
        <style>
            body { font-family: Arial; text-align: center; padding: 50px; background: #f5f5f5; }
            .container { max-width: 400px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; }
            .error { color: #dc2626; font-size: 48px; margin-bottom: 20px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="error">‚ö†Ô∏è</div>
            <h1>Error al Cancelar</h1>
            <p>${errorMessage}</p>
            <p>Por favor contacta al club directamente.</p>
            <a href="mailto:paddlepapudo@gmail.com">üìß Contactar Club</a>
        </div>
    </body>
    </html>
  `;
  // === PLANTILLAS PARA ACCIONES DE ADMIN (reutilizan plantillas existentes) ===

  // === GOLF - REUTILIZAR PLANTILLA EXISTENTE ===
  function generateGolfPlayerAddedTemplate(booking, organizerName, isVisitorBooking, email) {
    return generateGolfEmailTemplate(booking, organizerName, isVisitorBooking, email)
      .replace('Confirmaci√≥n de Reserva', 'Has sido agregado a una reserva')
      .replace('¬°Tu reserva ha sido confirmada exitosamente!', '¬°El administrador te ha agregado a una reserva de Golf!')
      .replace('Nos complace confirmar tu reserva', 'Has sido incluido en la siguiente reserva')
      .replace('¬°Nos vemos en el campo!', '¬°Confirma tu asistencia y nos vemos en el campo!');
  }

  function generateGolfPlayerRemovedTemplate(booking, organizerName, isVisitorBooking, email) {
    return generateGolfEmailTemplate(booking, organizerName, isVisitorBooking, email)
      .replace('Confirmaci√≥n de Reserva', 'Has sido removido de una reserva')
      .replace('¬°Tu reserva ha sido confirmada exitosamente!', 'Has sido removido de una reserva de Golf')
      .replace('Nos complace confirmar tu reserva', 'El administrador te ha removido de la siguiente reserva')
      .replace('linear-gradient(135deg, #4CAF50, #7CB342)', 'linear-gradient(135deg, #f44336, #d32f2f)')
      .replace('¬°Nos vemos en el campo!', 'Si tienes dudas, contacta al club directamente.');
  }

  // === TENIS - REUTILIZAR PLANTILLA EXISTENTE ===
  function generateTennisPlayerAddedTemplate(booking, organizerName, isVisitorBooking, email) {
    return generateTennisEmailTemplate(booking, organizerName, isVisitorBooking, email)
      .replace('Confirmaci√≥n de Reserva', 'Has sido agregado a una reserva')
      .replace('¬°Tu reserva ha sido confirmada exitosamente!', '¬°El administrador te ha agregado a una reserva de Tenis!')
      .replace('Nos complace confirmar tu reserva', 'Has sido incluido en la siguiente reserva')
      .replace('¬°Nos vemos en la cancha!', '¬°Confirma tu asistencia y nos vemos en la cancha!');
  }

  function generateTennisPlayerRemovedTemplate(booking, organizerName, isVisitorBooking, email) {
    return generateTennisEmailTemplate(booking, organizerName, isVisitorBooking, email)
      .replace('Confirmaci√≥n de Reserva', 'Has sido removido de una reserva')
      .replace('¬°Tu reserva ha sido confirmada exitosamente!', 'Has sido removido de una reserva de Tenis')
      .replace('Nos complace confirmar tu reserva', 'El administrador te ha removido de la siguiente reserva')
      .replace('background: linear-gradient(135deg, #2196F3, #1976D2)', 'background: linear-gradient(135deg, #f44336, #d32f2f)')
      .replace('¬°Nos vemos en la cancha!', 'Si tienes dudas, contacta al club directamente.');
  }

  // === PADEL - REUTILIZAR PLANTILLA EXISTENTE ===
  function generatePadelPlayerAddedTemplate(booking, organizerName, isVisitorBooking, email) {
    return generatePadelEmailTemplate(booking, organizerName, isVisitorBooking, email)
      .replace('Confirmaci√≥n de Reserva', 'Has sido agregado a una reserva')
      .replace('¬°Tu reserva ha sido confirmada exitosamente!', '¬°El administrador te ha agregado a una reserva de P√°del!')
      .replace('Nos complace confirmar tu reserva', 'Has sido incluido en la siguiente reserva')
      .replace('¬°Nos vemos en la cancha!', '¬°Confirma tu asistencia y nos vemos en la cancha!');
  }

  function generatePadelPlayerRemovedTemplate(booking, organizerName, isVisitorBooking, email) {
    return generatePadelEmailTemplate(booking, organizerName, isVisitorBooking, email)
      .replace('Confirmaci√≥n de Reserva', 'Has sido removido de una reserva')
      .replace('¬°Tu reserva ha sido confirmada exitosamente!', 'Has sido removido de una reserva de P√°del')
      .replace('Nos complace confirmar tu reserva', 'El administrador te ha removido de la siguiente reserva')
      .replace('background: linear-gradient(135deg, #2E7AFF, #1E5AFF)', 'background: linear-gradient(135deg, #f44336, #d32f2f)')
      .replace('¬°Nos vemos en la cancha!', 'Si tienes dudas, contacta al club directamente.');
  } 
  // === FUNCIONES DE PLANTILLAS ADMIN (al final del archivo) ===
  function generatePlayerAddedByAdminEmailTemplate(booking, organizerName, isVisitorBooking, email) {
    const sport = getSportFromCourtId(booking.courtId);
    
    if (sport === 'GOLF') {
      return generateGolfEmailTemplate(booking, organizerName, isVisitorBooking, email)
        .replace('Confirmaci√≥n de Reserva', 'Has sido agregado a una reserva')
        .replace('¬°Tu reserva ha sido confirmada exitosamente!', '¬°El administrador te ha agregado a una reserva!')
        .replace('¬°Nos vemos en el campo!', '¬°Confirma tu asistencia y nos vemos en el campo!');
    } else if (sport === 'TENIS') {
      return generateTennisEmailTemplate(booking, organizerName, isVisitorBooking, email)
        .replace('Confirmaci√≥n de Reserva', 'Has sido agregado a una reserva')
        .replace('¬°Tu reserva ha sido confirmada exitosamente!', '¬°El administrador te ha agregado a una reserva!')
        .replace('¬°Nos vemos en la cancha!', '¬°Confirma tu asistencia y nos vemos en la cancha!');
    } else {
      return generatePadelEmailTemplate(booking, organizerName, isVisitorBooking, email)
        .replace('Confirmaci√≥n de Reserva', 'Has sido agregado a una reserva')
        .replace('¬°Tu reserva ha sido confirmada exitosamente!', '¬°El administrador te ha agregado a una reserva!')
        .replace('¬°Nos vemos en la cancha!', '¬°Confirma tu asistencia y nos vemos en la cancha!');
    }
  }

  function generatePlayerRemovedByAdminEmailTemplate(booking, organizerName, isVisitorBooking, email) {
    const sport = getSportFromCourtId(booking.courtId);
    
    if (sport === 'GOLF') {
      return generateGolfEmailTemplate(booking, organizerName, isVisitorBooking, email)
        .replace('Confirmaci√≥n de Reserva', 'Has sido removido de una reserva')
        .replace('¬°Tu reserva ha sido confirmada exitosamente!', 'Has sido removido de una reserva')
        .replace('linear-gradient(135deg, #4CAF50, #7CB342)', 'linear-gradient(135deg, #f44336, #d32f2f)')
        .replace('¬°Nos vemos en el campo!', 'Si tienes dudas, contacta al club directamente.');
    } else if (sport === 'TENIS') {
      return generateTennisEmailTemplate(booking, organizerName, isVisitorBooking, email)
        .replace('Confirmaci√≥n de Reserva', 'Has sido removido de una reserva')
        .replace('¬°Tu reserva ha sido confirmada exitosamente!', 'Has sido removido de una reserva')
        .replace('background: linear-gradient(135deg, #2196F3, #1976D2)', 'background: linear-gradient(135deg, #f44336, #d32f2f)')
        .replace('¬°Nos vemos en la cancha!', 'Si tienes dudas, contacta al club directamente.');
    } else {
      return generatePadelEmailTemplate(booking, organizerName, isVisitorBooking, email)
        .replace('Confirmaci√≥n de Reserva', 'Has sido removido de una reserva')
        .replace('¬°Tu reserva ha sido confirmada exitosamente!', 'Has sido removido de una reserva')
        .replace('background: linear-gradient(135deg, #2E7AFF, #1E5AFF)', 'background: linear-gradient(135deg, #f44336, #d32f2f)')
        .replace('¬°Nos vemos en la cancha!', 'Si tienes dudas, contacta al club directamente.');
    }
  }
}

// ============================================================================
// NOTAS PARA MANTENIMIENTO FUTURO
// ============================================================================

/// ROADMAP DE DESARROLLO:
/// 
/// 1. **EXPANSI√ìN MULTI-DEPORTE (4 semanas)**:
///    - Extender dailyUserSync para m√∫ltiples deportes
///    - Migrar funcionalidad Golf/Tenis desde Google Apps Script
///    - Unificar toda la funcionalidad en Firebase Functions
/// 
/// 2. **OPTIMIZACIONES DE PERFORMANCE**:
///    - Implementar cache en getUsers para reducir latencia
///    - Batch processing en dailyUserSync para mayor eficiencia
///    - Optimizar queries con √≠ndices compuestos en Firestore
/// 
/// 3. **MEJORAS DE SEGURIDAD**:
///    - Implementar rate limiting en endpoints p√∫blicos
///    - Validaci√≥n m√°s estricta de par√°metros de entrada
///    - Logging de seguridad para auditor√≠a
/// 
/// 4. **FUNCIONALIDADES ADICIONALES**:
///    - Sistema de recordatorios autom√°ticos 24h antes
///    - Integraci√≥n con calendario del club
///    - Dashboard de administraci√≥n para staff
///    - Reportes de uso y estad√≠sticas
/// 
/// CONSIDERACIONES T√âCNICAS:
/// 
/// - **Logging**: Logs exhaustivos est√°n activados para debugging,
///   considerar reducir en producci√≥n final para mejor performance
/// 
/// - **Error Handling**: Sistema robusto que nunca falla completamente,
///   siempre proporciona fallbacks funcionales
/// 
/// - **Escalabilidad**: Arquitectura preparada para crecimiento,
///   puede manejar 1000+ usuarios sin cambios significativos
/// 
/// - **Mantenimiento**: C√≥digo documentado y modular para facilitar
///   actualizaciones y debugging por m√∫ltiples desarrolladores